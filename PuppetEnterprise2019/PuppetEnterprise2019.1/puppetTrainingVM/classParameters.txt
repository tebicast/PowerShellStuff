A class's parameters are defined as a comma-separated list of parameter name and default value pairs ($parameter_name = default_value,). 
These parameter value pairs are enclosed in parentheses ((...)) between the class name and the opening curly bracket ({) that begins the body of the class.
 For readability, multiple parameters should be listed one per line, for example:

class class_name (
  $parameter_one = default_value_one,
  $parameter_two = default_value_two,
){
 ...
}

Notice that this list of parameters must be comma-separated, while variables set within the body of the class itself are not. 
This is because the Puppet parser treats these parameters as a list, while variable assignments in the body of your class are individual statements. 
These parameters are available as variables within the body of the class.

To declare a class with specific parameters, use the resource-like class declaration. 
As the name suggests, the syntax for a resource-like class declaration is very similar to a resource declaration. 
It consists of the keyword class followed by a set of curly braces ({...}) containing the class name with a colon (:) and a list of parameters and values. 
Any values left out in this declaration are set to the defaults defined within the class, or undef if no default is set.

class { 'class_name':
  parameter_one => value_one,
  parameter_two => value_two,
}

Unlike the include function, which can be used for the same class in multiple places, resource-like class declarations can only be used once per class. 
Because a class declared with the include uses defaults, it will always be parsed into the same set of resources in your catalog. 
This means that Puppet can safely handle multiple include calls for the same class.
Because multiple resource-like class declarations are not guaranteed to lead to the same set of resources, Puppet has no unambiguous way to handle multiple resource-like declarations of the same class. 
Attempting to make multiple resource-like declarations of the same class will cause the Puppet parser to throw an error.